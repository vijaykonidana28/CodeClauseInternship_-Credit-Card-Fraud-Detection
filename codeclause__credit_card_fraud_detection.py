# -*- coding: utf-8 -*-
"""CodeClause_ Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MXH6JLcZqFsdAbd9pwX18mxmuxKSYOk-
"""

!pip install -q imbalanced-learn xgboost

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

from imblearn.over_sampling import SMOTE
from xgboost import XGBClassifier

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("creditcard.csv")
df.head()

print("Dataset shape:", df.shape)
print(df["Class"].value_counts())
df.describe()

# Separate features and target
X = df.drop("Class", axis=1)
y = df["Class"]

# Standardize the 'Amount' feature
scaler = StandardScaler()
X["Amount"] = scaler.fit_transform(X["Amount"].values.reshape(-1, 1))
X.drop("Time", axis=1, inplace=True)

print("Before SMOTE:", y.value_counts())
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)
print("After SMOTE:", pd.Series(y_resampled).value_counts())

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

model = XGBClassifier(eval_metric='logloss', random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:,1]

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.show()

roc_score = roc_auc_score(y_test, y_proba)
print("ROC AUC Score:", roc_score)

fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.plot(fpr, tpr, label="XGBoost (AUC = {:.2f})".format(roc_score))
plt.plot([0,1], [0,1], linestyle='--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.grid(True)
plt.show()